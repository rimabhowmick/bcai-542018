package basics

import com.test.transformation.Features._
import com.test.transformation.module.helper.UtilsHelper._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions.col
import org.junit.{After, Before, Test}
import org.scalatest.Assertions._
import org.slf4j.{Logger, LoggerFactory}

/**
  * Created by  kumaraswamy on 9/13/17.
  */
@Test class FeatureExtractionTest {

  val logger: Logger = LoggerFactory.getLogger(getClass)
  private var spark: SparkSession = _

  /**
    * Create Spark context before tests
    */
  @Before def setUp(): Unit = {
    spark = {
      SparkSession.builder().appName("FeatureExtractionTest").master("local").getOrCreate()
    }
  }

  /**
    * Stop Spark context after tests
    */
  @After def tearDown(): Unit = {
    spark.stop()
    spark = null
  }

  @Test def SimpleTest(): Unit = {

    val r1 = FourColumns("75029551647502955164E05091600072505", "05.09.2016 18:15:58", Array(199.006, 201.000, 202.000, 203.000, 204.000, 205.000), Array(31.000, 32.000, 33.000, 36.000, 35.000, 34.000))
    val r2 = FourColumns("75029551647502955164E05091600072504", "05.09.2016 18:17:12", Array(198.000, 199.000, 200.000, 201.005, 202.000, 203.000, 204.000, 204.000, 205.000), Array(30.940, 31.020, 31.100, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99))

    val records = Seq(r2, r1)
    val df = spark.createDataFrame(records)
    //val df_result = df.features(loadConfigFile("configuration-examples/simple-features.conf"))

    /*
    === expected result for one row
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+------------------------------------+
|partNumber                         |timeStamp          |xAxis                                                            |yAxis                                                             |yAxis_features_group                |
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+------------------------------------+
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_min===30.94                |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_max===31.165               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_mean===31.05625            |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_var===0.007142187499999918 |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_std===0.08451146371942636  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w0_slope===0.07499999999999929|
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_min===31.252               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_max===35.66                |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_mean===33.67425            |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_var===2.6263191874999974   |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_std===1.6205922335677156   |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w1_slope===1.4693333333333325 |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_min===336.99               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_max===336.99               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_mean===336.99              |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_var===0.0                  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_std===0.0                  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|yAxis_w2_slope===NaN                |
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+------------------------------------+
    */

    assertResult(30) {
  //    df_result.count()
    }

   // assertResult(true)(hasColumn(df_result, "yAxis_features_group"))

    assertResult(2) {
   //   df_result.filter(condition = col("yAxis_features_group").contains("min") && col("partNumber") === "75029551647502955164E05091600072505").count()
    }

    assertResult(3) {
  //    df_result.filter(col("yAxis_features_group").contains("min") && col("partNumber") === "75029551647502955164E05091600072504").count()
    }

    assertResult(12) {
  //    df_result.filter((col("yAxis_features_group").contains("max") || col("yAxis_features_group").contains("min") || col("yAxis_features_group").contains("var") || col("yAxis_features_group").contains("mean") || col("yAxis_features_group").contains("std") || col("yAxis_features_group").contains("slope")) && col("partNumber") === "75029551647502955164E05091600072505").count()
    }
    
  }

  @Test def SimpleTestCutoff(): Unit = {

    val r1 = FourColumns("75029551647502955164E05091600072505", "05.09.2016 18:15:58", Array(199.006, 201.000, 202.000, 203.000, 204.000, 205.000), Array(31.000, 32.000, 33.000, 36.000, 35.000, 34.000))
    val r2 = FourColumns("75029551647502955164E05091600072504", "05.09.2016 18:17:12", Array(198.000, 199.000, 200.000, 201.005, 202.000, 203.000, 204.000, 204.000, 205.000), Array(30.940, 31.020, 31.100, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99))

    val records = Seq(r2, r1)
    val df = spark.createDataFrame(records)
   // val df_result = df.features(loadConfigFile("configuration-examples/simple-cutoff.conf"))

    /*
    === expected result for one row
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------+--------------------------------------+
|partNumber                         |timeStamp          |xAxis                                                            |yAxis                                                             |xAxis_out                            |yAxis_out                             |
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------+--------------------------------------+
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[198.0, 199.0, 200.0, 201.005, 202.0, 203.0, 204.0, 204.0, 205.0]|[30.94, 31.02, 31.1, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99]|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|
+-----------------------------------+-------------------+-----------------------------------------------------------------+------------------------------------------------------------------+-------------------------------------+--------------------------------------+
    */ assertResult(2) {
      df_result.count()
    }

   // assertResult(true)(hasColumn(df_result, "xAxis_out"))

    //assertResult(true)(hasColumn(df_result, "yAxis_out"))
    df_result.show(false)
    df_result.printSchema()
  }

  @Test def MixedTestFeatures(): Unit = {

    val r1 = FourColumns("75029551647502955164E05091600072505", "05.09.2016 18:15:58", Array(199.006, 201.000, 202.000, 203.000, 204.000, 205.000), Array(31.000, 32.000, 33.000, 36.000, 35.000, 34.000))
    val r2 = FourColumns("75029551647502955164E05091600072504", "05.09.2016 18:17:12", Array(198.000, 199.000, 200.000, 201.005, 202.000, 203.000, 204.000, 204.000, 205.000), Array(30.940, 31.020, 31.100, 31.165, 31.252, 33.345, 34.44, 35.66, 336.99))

    val records = Seq(r2, r1)
    val df = spark.createDataFrame(records)
   // val df_result = df.features(loadConfigFile("configuration-examples/simple-cutoff1.conf"))

  //  assertResult(true)(hasColumn(df_result, "xAxis"))
   // assertResult(true)(hasColumn(df_result, "yAxis"))

  //  val df_result1 = df_result.features(loadConfigFile("configuration-examples/simple-features.conf"))

    /*
    === expected result for one row
+-----------------------------------+-------------------+-------------------------------------+--------------------------------------+------------------------------------+
|partNumber                         |timeStamp          |xAxis                                |yAxis                                 |yAxis_features_group                |
+-----------------------------------+-------------------+-------------------------------------+--------------------------------------+------------------------------------+
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_min===31.165               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_max===31.252               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_mean===31.2085             |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_var===0.001892249999999989 |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_std===0.04349999999999987  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w0_slope===0.08699999999999974|
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_min===33.345               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_max===34.44                |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_mean===33.8925             |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_var===0.2997562499999994   |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_std===0.5474999999999994   |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w1_slope===1.0949999999999989 |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_min===35.66                |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_max===35.66                |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_mean===35.66               |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_var===0.0                  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_std===0.0                  |
|75029551647502955164E05091600072504|05.09.2016 18:17:12|[201.005, 202.0, 203.0, 204.0, 204.0]|[31.165, 31.252, 33.345, 34.44, 35.66]|yAxis_w2_slope===NaN                |
+-----------------------------------+-------------------+-------------------------------------+--------------------------------------+------------------------------------+
  */ assertResult(30) {
     // df_result1.count()
    }

    assertResult(18) {
     // df_result1.filter((col("yAxis_features_group").contains("max") || col("yAxis_features_group").contains("min") || col("yAxis_features_group").contains("var") || col("yAxis_features_group").contains("mean") || col("yAxis_features_group").contains("std") || col("yAxis_features_group").contains("slope")) && col("partNumber") === "75029551647502955164E05091600072504").count()
    }

  }

  case class FourColumns(partNumber: String, timeStamp: String, xAxis: Array[Double], yAxis: Array[Double])

}
